plugins {
    id 'java'
    id 'war'
    id 'maven-publish'
    id "org.springframework.boot" version "2.1.8.RELEASE"
    id "com.microsoft.azure.azurewebapp" version "1.2.0"
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    def springVersion = "2.1.8.RELEASE"
    def log4jVersion = "2.4.13" // this is a deliberately insecure version
    implementation "org.springframework.boot:spring-boot-starter-actuator:$springVersion"
    implementation "org.springframework.boot:spring-boot-starter-web:$springVersion"
    implementation "org.springframework.boot:spring-boot-starter-security:$springVersion"
    implementation "org.springframework.security:spring-security-taglibs:5.2.8.RELEASE"
    implementation "org.springframework.boot:spring-boot-starter-data-jdbc:$springVersion"
    implementation "org.springframework.boot:spring-boot-starter-log4j2:$log4jVersion"
    implementation "org.springframework.boot:spring-boot-starter-jdbc:$springVersion"
    modules {
        module("org.springframework.boot:spring-boot-starter-logging") {
            replacedBy("org.springframework.boot:spring-boot-starter-log4j2", "Use Log4j2 instead of Logback")
        }
    }
    implementation "org.springframework.boot:spring-boot-devtools:$springVersion"
    implementation "org.springframework.boot:spring-boot-starter-tomcat:$springVersion"
    implementation "org.apache.tomcat.embed:tomcat-embed-jasper"
    implementation 'javax.servlet:jstl:1.2'
    implementation 'com.h2database:h2:1.4.197'
    implementation 'org.webjars:lodash:4.17.4'
    testImplementation "org.springframework.boot:spring-boot-starter-test:$springVersion"
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
}

apply plugin: 'io.spring.dependency-management'

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    exclude module: 'spring-boot-starter-logging'
}

def props = new Properties()
if (file(".env").isFile()) {
    file(".env").withInputStream { props.load(it) }
}
project.archivesBaseName = 'FortifyDemoApp'
group = 'com.microfocus.app'
version = ''
sourceCompatibility = '1.8'

azurewebapp {
    subscription = props.getProperty("AZURE_SUBSCRIPTION_ID") // e.g. '17d2722b-256e-47e5-84b8-5b01f509a42c'
    resourceGroup = props.getProperty("AZURE_RESOURCE_GROUP") // e.g. 'fortify-demo-rg'
    appName = props.getProperty("AZURE_APP_NAME") // e.g. 'fortify-demo-app'
    pricingTier = 'B1'
    region = props.getProperty("AZURE_REGION") // e.g. 'eastus'
    runtime {
        //os = 'Windows'
        os = 'Linux'
        webContainer = 'Tomcat 9.0'
        //webContainer = 'Java SE'
        javaVersion = 'Java 1.8'
    }
    appSettings {
        key1=value1
    }
    auth {
        type = 'azure_cli' // support azure_cli, oauth2, device_code and service_principal
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
    reports {
        junitXml.enabled = true
        html.enabled = false
    }
}

bootRun {
    systemProperty "spring.profiles.active", "dev"
    //jvmArgs = [ "-javaagent:C:\\Tools\\Fortify_WebInspect_Runtime_Agent_Java_21.3.1\\lib\\FortifyAgent.jar" ]
}

task writeClasspath() {
    doLast() {
        buildDir.mkdirs()
        def files = configurations.compileClasspath.getFiles().sort()
        new File(buildDir, "classpath.txt").text = files.collect { it.path }.join(';')
        //files.forEach{ f -> print("$f.path;")}
    }
}

task copyDependencies(dependsOn: 'jar', type: Copy) {
    def conf = configurations.runtimeClasspath
    from conf.allDependencies.collect { conf.files(it) }
    into "${project.buildDir}/dependencies"
}

tasks.named('wrapper') {
    distributionType = Wrapper.DistributionType.ALL
}

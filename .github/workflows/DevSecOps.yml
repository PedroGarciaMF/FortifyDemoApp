# DevSecOps workflow including Application Security Testing with Fortify ScanCentral (SAST/DAST) and Debricked

name: DevSecOps with Fortify

on:
  # Triggers the workflow on push or pull request events
  push:
    paths-ignore:
      - '.github/workflows/**'
      - 'bin/**'
      - 'data/**'
      - 'etc/**'
      - 'media/**'
      - 'Jenkinsfile'
      - 'README.md'
      - 'LICENSE'
    branches:
      - '**'        # matches every branch
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      runScanCentralSASTScan:
        description: 'Carry out SAST scan using Fortify ScanCentral SAST'
        required: false
        default: 'true'
      runDebrickedScan:
        description: 'Carry out SCA scan using Debricked'
        required: false
        default: 'true'
      runScanCentralDASTScan:
        description: 'Carry out DAST scan using Fortify ScanCentral DAST'
        required: false
        default: 'false'

# Global environment variables
env:
  APP_NAME: "FortifyDemoApp"
  PARENT_APPVER_NAME: "main"
  PACKAGE_FILE: "package.zip"
  FCLI_VER: "dev_2.0.0-beta"
  SCANCENTRAL_VER: "23.1.0"

jobs:

  Build-And-Test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Checkout the code
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0
        with:
          # Fetch at least the immediate parents so that if this is a pull request then we can checkout the head.
          fetch-depth: 2
      # If this run was triggered by a pull request event, then checkout the head of the pull request instead of the merge commit.
      - run: git checkout HEAD^2
        if: ${{ github.event_name == 'pull_request' }}

      # Setup JDK 11 on host
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'
          cache: 'gradle'

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Create .env file in case it is needed by scripts
      - name: Create envfile
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_DEBUG: false

      # Build / Test with Gradle
      - name: Build with Gradle
        run:  ./gradlew clean build

  Deploy-Web-App:
    runs-on: ubuntu-latest
    needs: [Build-And-Test]

    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'
          cache: 'gradle'

      # Create .env file in case it is needed by scripts
      - name: Create envfile
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_DEBUG: false
          envkey_AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          envkey_AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
          envkey_AZURE_APP_NAME: ${{ vars.AZURE_APP_NAME }}
          envkey_AZURE_REGION: ${{ vars.AZURE_REGION }}

      #- uses: azure/login@v1
      #  with:
      #    creds: ${{ secrets.AZURE_CREDENTIALS }}

      #- run: |
      #    az webapp list --query "[?state=='Running']"

       # TBD

  Verify-SSC-Environment:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}
      appverid: ${{ steps.create_ssc_appversion.outputs.appverid }}

    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'
          cache: 'gradle'

      # Get the branch name or pr number
      - name: Extract branch name
        shell: bash
        run: |
          if [[ $GITHUB_REF == *"refs/pull/"* ]]; then
            BRANCH_NAME="$(echo ${GITHUB_REF#refs/pull/})"
            PR_NUMBER="$(echo ${BRANCH_NAME%/merge})"
            BRANCH_NAME="[PR]${SOURCE_BRANCH}#${PR_NUMBER}"
          else
            BRANCH_NAME="$(echo ${GITHUB_REF#refs/heads/})"
          fi
          echo "branch=${BRANCH_NAME}"
          echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        env:
          SOURCE_BRANCH: ${{ github.head_ref }}
        id: extract_branch

      # Install Fortify Command Line (fcli) tool
      - name: Install fcli
        shell: bash
        run: |
          mkdir -p $HOME/fcli/bin
          curl -fsSL https://github.com/fortify-ps/fcli/releases/download/${FCLI_VER}/fcli-linux.tgz | tar -zxvf - -C $HOME/fcli/bin
          echo "::debug::PATH=$HOME/fcli/bin"
          echo "$HOME/fcli/bin" >> $GITHUB_PATH

      # Create SSC application version for GitHub branch - if it doesn't already exist
      - name: Create SSC application version
        shell: bash
        run: |
          fcli ssc session login --url $SSC_URI --ci-token $SSC_CI_TOKEN github-actions
          fcli ssc app list --session github-actions
          fcli ssc appversion create "${SSC_APPVER_NAME}" --description "Created automatically from GitHub" --issue-template "${SSC_ISSUE_TEMPLATE}" --auto-required-attrs --skip-if-exists --store curRel --session github-actions
          APPVERID=$(fcli state var contents curRel -o expr="{id}")
          echo "appverid=${APPVERID}"
          echo "appverid=${APPVERID}" >> $GITHUB_OUTPUT
          fcli ssc session logout --no-revoke-token github-actions
        id: create_ssc_appversion
        env:
          SSC_URI: ${{ vars.SSC_URI }}
          SSC_CI_TOKEN: ${{ secrets.SSC_CI_TOKEN }}
          SSC_APPVER_NAME: ${{ format('{0}:{1}', env.APP_NAME, steps.extract_branch.outputs.branch) }}
          SSC_ISSUE_TEMPLATE: "Prioritized-LowRisk-Project-Template"

  Debricked-SCA:
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'push') || (github.event_name == 'pull_request') || (github.event.inputs.runDebrickedScan == 'true') }}
    needs: [ Verify-SSC-Environment ]

    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'
          cache: 'gradle'
      - uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_DEBUG: false
      - name: Create dependency files
        shell: bash
        run: |
          ./gradlew clean build copyDependencies -x test
          ./gradlew dependencies > .debricked-gradle-dependencies.
      - uses: debricked/vulnerable-functionality/java@v0
        with:
          path-to-compiled-files: 'build/classes/java'
          path-to-library-files: 'build/dependencies'
      - uses: debricked/actions/scan@v1
        env:
          DEBRICKED_TOKEN: ${{ secrets.DEBRICKED_TOKEN }}
      - name: Install fcli
        shell: bash
        run: |
          mkdir -p $HOME/fcli/bin
          curl -fsSL https://github.com/fortify-ps/fcli/releases/download/${FCLI_VER}/fcli-linux.tgz | tar -zxvf - -C $HOME/fcli/bin
          echo "::debug::PATH=$HOME/fcli/bin"
          echo "$HOME/fcli/bin" >> $GITHUB_PATH
      - name: Export Debricked to SSC
        shell: bash
        run: |
          fcli ssc session login --url $SSC_URI --ci-token $SSC_CI_TOKEN github-actions
          fcli ssc appversion-artifact import-debricked --appversion $SSC_APPVER_ID -t $DEBRICKED_TOKEN -r "$DEBRICKED_REPO" -b "$BRANCH_NAME" --store curImport --session github-actions
          fcli ssc appversion-artifact wait-for ::curImport:: -i 5s -t 1h --session github-actions
          fcli ssc session logout --no-revoke-token github-actions
        env:
          SSC_URI: ${{ vars.SSC_URI }}
          SSC_CI_TOKEN: ${{ secrets.SSC_CI_TOKEN }}
          SSC_APPVER_ID: ${{needs.Verify-SSC-Environment.outputs.appverid}}
          BRANCH_NAME: ${{needs.Verify-SSC-Environment.outputs.branch}}
          DEBRICKED_REPO: ${{ vars.DEBRICKED_REPO }}
          DEBRICKED_TOKEN: ${{ secrets.DEBRICKED_TOKEN }}

  Quality-Gate:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [ Build-And-Test ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3.3.0

    # TBD

  ScanCentral-SAST-Scan:
    # Use the appropriate runner for building your source code.
    # Use a Windows runner for .NET projects that use msbuild. Additional changes to RUN commands will be required to switch to Windows syntax.
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'push') || (github.event_name == 'pull_request') || (github.event.inputs.runScanCentralSASTScan == 'true') }}
    needs: [ Verify-SSC-Environment ]

    steps:
      - name: Check Out Source Code
        uses: actions/checkout@v3.3.0

      # Setup JDK 11 on host
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'
          cache: 'gradle'

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Create .env file in case it is needed by scripts
      - name: Create envfile
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_DEBUG: false

      # Get the branch name or pr number
      - name: Extract branch name
        shell: bash
        run: |
          if [[ $GITHUB_REF == *"refs/pull/"* ]]; then
            BRANCH_NAME="$(echo ${GITHUB_REF#refs/pull/})"
            PR_NUMBER="$(echo ${BRANCH_NAME%/merge})"
            BRANCH_NAME="[PR]${SOURCE_BRANCH}#${PR_NUMBER}"
          else
            BRANCH_NAME="$(echo ${GITHUB_REF#refs/heads/})"
          fi
          echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        env:
          SOURCE_BRANCH: ${{ github.head_ref }}
        id: extract_branch

      # Install Fortify Command Line (fcli) tool
      - name: Install fcli
        shell: bash
        run: |
          mkdir -p $HOME/fcli/bin
          curl -fsSL https://github.com/fortify-ps/fcli/releases/download/${FCLI_VER}/fcli-linux.tgz | tar -zxvf - -C $HOME/fcli/bin
          echo "::debug::PATH=$HOME/fcli/bin"
          echo "$HOME/fcli/bin" >> $GITHUB_PATH

      # Copy IaC files so they are included in the ScanCentral Package
      - name: Copy IaC files
        shell: bash
        run: |
          cp -f azuredeploy.* ./src/main/resources
          cp Dockerfile ./src/main/resources

      # Prepare source+dependencies for upload using "scancentral package"
      - name: Download and run Fortify ScanCentral Client
        uses: fortify/gha-setup-scancentral-client@v2.3.0
        with:
          version: 23.1.0
      - name: Package Code + Dependencies
        run: scancentral package -bt gradle -bf build.gradle -bc "clean build -x test" -o $PACKAGE_FILE
        env:
          PACKAGE_FILE: "package.zip"

      # Start ScanCentral SAST scan and wait for completion
      - name: Run ScanCentral SAST Scan
        shell: bash
        run: |
          fcli sc-sast session login --ssc-url $SSC_URI --ssc-ci-token $SSC_CI_TOKEN --client-auth-token $CLIENT_AUTH_TOKEN github-actions
          fcli sc-sast scan start --sensor-version $SSC_SENSOR_VER --appversion "${SSC_APPVER_NAME}" -p "${PACKAGE_FILE}" --store curScan --session github-actions
          fcli sc-sast scan wait-for ::curScan:: -i 5s -t 1h --session github-actions
          fcli sc-sast session logout --no-revoke-token github-actions
        env:
          SSC_URI: ${{ vars.SSC_URI }}
          SSC_CI_TOKEN: ${{ secrets.SSC_CI_TOKEN }}
          SSC_APPVER_NAME: ${{ format('{0}:{1}', env.APP_NAME, steps.extract_branch.outputs.branch) }}
          PACKAGE_FILE: "package.zip"
          CLIENT_AUTH_TOKEN: ${{ secrets.CLIENT_AUTH_TOKEN }}
          SSC_SENSOR_VER: "23.1.0"

      # FOR DEBUG - Save ScanCentral log file
      #- uses: actions/upload-artifact@v3
      #  if: failure()
      #  with:
      #    name: scancentral1.log
      #    path: ~/.fortify/scancentral-23.1.0/log/scancentral.log
      #    retention-days: 5

      # FOR DEBUG - Save package.zip
      #- name: 'Upload Artifact'
      #  uses: actions/upload-artifact@v3
      #  with:
      #    name: package.zip
      #    path: package.zip
      #    retention-days: 5

      # Pull SAST issues from Fortify ScanCentral and generate GitHub-optimized SARIF output
      - name: Export Results
        uses: fortify/gha-export-vulnerabilities@v1.0.2
        with:
          ssc_base_url: ${{ vars.SSC_URI }}
          ssc_auth_token: ${{ secrets.SSC_CI_TOKEN }}
          ssc_version_name: ${{ format('{0}:{1}', env.APP_NAME, steps.extract_branch.outputs.branch) }}

      # Check if SARIF output file has been created
      - name: Check file existence
        id: check_files_sarif
        uses: andstor/file-existence-action@v2
        with:
          files: "./gh-fortify-sast.sarif"

      # Import Fortify SAST results to GitHub Security Code Scanning
      - name: Import Results
        if: steps.check_files_sarif.outputs.files_exists == 'true'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ./gh-fortify-sast.sarif

  ScanCentral-DAST-Scan:
    runs-on: ubuntu-latest
    if: ${{ (github.event.inputs.runScanCentralDASTScan == 'true') }}
    needs: [ Verify-SSC-Environment, Deploy-Web-App ]

    steps:
      - name: Check Out Source Code
        uses: actions/checkout@v3.3.0

      # Setup JDK 11 on host
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'gradle'

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Create .env file in case it is needed by scripts
      - name: Create envfile
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_DEBUG: false

      # Get the branch name or pr number
      - name: Extract branch name
        shell: bash
        run: |
          if [[ $GITHUB_REF == *"refs/pull/"* ]]; then
            BRANCH_NAME="$(echo ${GITHUB_REF#refs/pull/})"
            PR_NUMBER="$(echo ${BRANCH_NAME%/merge})"
            BRANCH_NAME="[PR]${SOURCE_BRANCH}#${PR_NUMBER}"
          else
            BRANCH_NAME="$(echo ${GITHUB_REF#refs/heads/})"
          fi
          echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        env:
          SOURCE_BRANCH: ${{ github.head_ref }}
        id: extract_branch

      # Install Fortify Command Line (fcli) tool
      - name: Install fcli
        shell: bash
        run: |
          mkdir -p $HOME/fcli/bin
          curl -fsSL https://github.com/fortify-ps/fcli/releases/download/${FCLI_VER}/fcli-linux.tgz | tar -zxvf - -C $HOME/fcli/bin
          echo "$HOME/fcli/bin" >> $GITHUB_PATH

      # Start ScanCentral DAST scan and wait for completion
      - name: Run ScanCentral DAST Scan
        shell: bash
        run: |
          fcli sc-dast session login --ssc-url $SSC_URI --ssc-ci-token $SSC_CI_TOKEN github-actions
          fcli sc-dast scan start --settings "${SCDAST_SETTINGS_ID}" --store curScan --session github-actions "${SCAN_NAME}"
          fcli sc-dast scan wait-for ::curScan:: -i 5s -t 4h --session github-actions
          fcli sc-dast session logout --no-revoke-token github-actions
        env:
          SSC_URI: ${{ vars.SSC_URI }}
          SSC_CI_TOKEN: ${{ secrets.SSC_CI_TOKEN }}
          SCDAST_SETTINGS_ID: $ {{ vars.SCDAST_SETTINGS_ID }}
          SCAN_NAME: ${{ format('GHA_Scan_{0}:{1}', env.APP_NAME, steps.extract_branch.outputs.branch) }}


  Security-Gate:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [ Verify-SSC-Environment, Debricked-SCA,ScanCentral-SAST-Scan,ScanCentral-DAST-Scan ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Check Out Source Code
        uses: actions/checkout@v3.3.0

      # Setup JDK 11 on host
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'gradle'

      # Setup Gradle
      #- name: Setup Gradle
      #  uses: gradle/gradle-build-action@v2

      # Get the branch name or pr number
      #- name: Extract branch name
      #  shell: bash
      #  run: |
      #    if [[ $GITHUB_REF == *"refs/pull/"* ]]; then
      #      BRANCH_NAME="$(echo ${GITHUB_REF#refs/pull/})"
      #      PR_NUMBER="$(echo ${BRANCH_NAME%/merge})"
      #      BRANCH_NAME="[PR]${SOURCE_BRANCH}#${PR_NUMBER}"
      #    else
      #      BRANCH_NAME="$(echo ${GITHUB_REF#refs/heads/})"
      #    fi
      #    echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
      #  env:
      #    SOURCE_BRANCH: ${{ github.head_ref }}
      #  id: extract_branch

      # Install Fortify Command Line (fcli) tool
      - name: Install fcli
        shell: bash
        run: |
          mkdir -p $HOME/fcli/bin
          curl -fsSL https://github.com/fortify-ps/fcli/releases/download/${FCLI_VER}/fcli-linux.tgz | tar -zxvf - -C $HOME/fcli/bin
          echo "::debug::PATH=$HOME/fcli/bin"
          echo "$HOME/fcli/bin" >> $GITHUB_PATH

      # Run script to check the Security Policy of the Fortify ScanCentral Application Version to determine success/failure
      - name: Verify Security Policy
        shell: bash
        run: |
          fcli ssc session login --url $SSC_URI --ci-token $SSC_CI_TOKEN github-actions
          fcli ssc appversion-vuln count --appversion $SSC_APPVER_ID --session github-actions
          if [ $(fcli ssc appversion-vuln count --appversion $SSC_APPVER_ID -q 'cleanName matches "Critical"' -o expr="{totalCount}" --session github-actions) -gt "${MAX_CRITICAL_COUNT}" ]; then \
            echo "Security policy: failed"; \ 
          else 
            echo "Security policy: passed"; \
          fi
          fcli ssc session logout --no-revoke-token github-actions
        id: verify_security_policy
        env:
          SSC_URI: ${{ vars.SSC_URI }}
          SSC_CI_TOKEN: ${{ secrets.SSC_CI_TOKEN }}
          SSC_APPVER_ID: ${{needs.Verify-SSC-Environment.outputs.appverid}}
          #SSC_APPVER_NAME: ${{ format('{0}:{1}', env.APP_NAME, steps.extract_branch.outputs.branch) }}
          MAX_CRITICAL_COUNT: ${{ vars.SSC_MAX_CRITICAL_COUNT }}
          MAX_HIGH_COUNT: ${{ vars.SSC_MAX_HIGH_COUNT }}

  Release-Gate:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [ Quality-Gate, Security-Gate ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Check Out Source Code
        uses: actions/checkout@v3.3.0

    # TBD
